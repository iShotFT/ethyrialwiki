{{- if .Values.services.worker }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "outline.fullname" . }}-worker
  labels:
    {{- include "outline.labels" . | nindent 4 }}
    app.kubernetes.io/component: worker
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount.worker }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "outline.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: worker
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "outline.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: worker
    spec:
      {{- if .Values.hostNetwork }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}
      dnsConfig:
        nameservers:
        - 10.152.183.10
        searches:
        - {{ .Release.Namespace }}.svc.cluster.local
        - svc.cluster.local
        - cluster.local
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "outline.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: wait-for-dependencies
          image: busybox
          command:
            - sh
            - -c
            - |
              echo "Waiting for PostgreSQL and Redis to be accessible..."
              # Try service DNS names with retry logic
              POSTGRES_HOST="outline-postgresql.{{ .Release.Namespace }}.svc.cluster.local"
              REDIS_HOST="outline-redis-master.{{ .Release.Namespace }}.svc.cluster.local"
              
              echo "Checking DNS resolution for $POSTGRES_HOST..."
              for i in $(seq 1 30); do
                if nslookup $POSTGRES_HOST > /dev/null 2>&1; then
                  echo "DNS resolution successful for PostgreSQL"
                  break
                fi
                echo "Attempt $i: DNS resolution failed for PostgreSQL, retrying in 2s..."
                sleep 2
                if [ $i -eq 30 ]; then
                  echo "WARNING: DNS resolution still failing for PostgreSQL after 30 attempts"
                  # Continue anyway, we'll check connectivity directly
                fi
              done
              
              echo "Checking DNS resolution for $REDIS_HOST..."
              for i in $(seq 1 30); do
                if nslookup $REDIS_HOST > /dev/null 2>&1; then
                  echo "DNS resolution successful for Redis"
                  break
                fi
                echo "Attempt $i: DNS resolution failed for Redis, retrying in 2s..."
                sleep 2
                if [ $i -eq 30 ]; then
                  echo "WARNING: DNS resolution still failing for Redis after 30 attempts"
                  # Continue anyway, we'll check connectivity directly
                fi
              done
              
              # Try connection to PostgreSQL
              echo "Checking connection to PostgreSQL..."
              for i in $(seq 1 30); do
                if nc -z -w 2 $POSTGRES_HOST 5432; then
                  echo "PostgreSQL is accessible!"
                  break
                fi
                echo "Attempt $i: PostgreSQL not accessible, retrying in 2s..."
                sleep 2
                if [ $i -eq 30 ]; then
                  echo "WARNING: PostgreSQL still not accessible after 30 attempts"
                fi
              done
              
              # Try connection to Redis
              echo "Checking connection to Redis..."
              for i in $(seq 1 30); do
                if nc -z -w 2 $REDIS_HOST 6379; then
                  echo "Redis is accessible!"
                  break
                fi
                echo "Attempt $i: Redis not accessible, retrying in 2s..."
                sleep 2
                if [ $i -eq 30 ]; then
                  echo "WARNING: Redis still not accessible after 30 attempts"
                fi
              done
              
              echo "Dependency check completed, proceeding with startup"
      containers:
        - name: {{ .Chart.Name }}-worker
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["yarn", "start", "--services=worker"]
          resources:
            {{- toYaml .Values.resources.worker | nindent 12 }}
          env:
          {{- range $key, $value := .Values.env }}
          {{- if and (ne $key "DATABASE_URL") (ne $key "REDIS_URL") }}
            - name: {{ $key }}
              value: {{ $value | quote }}
          {{- end }}
          {{- end }}
          {{- if .Values.postgresql.enabled }}
            - name: DATABASE_URL
              value: postgres://{{ .Values.postgresql.auth.username }}:{{ .Values.postgresql.auth.password }}@outline-postgresql.{{ .Release.Namespace }}.svc.cluster.local:5432/{{ .Values.postgresql.auth.database }}?sslmode=disable
          {{- end }}
          {{- if .Values.redis.enabled }}
            - name: REDIS_URL
              value: redis://outline-redis-master.{{ .Release.Namespace }}.svc.cluster.local:6379
          {{- end }}
          {{- range .Values.extraEnv }}
            - name: {{ .name }}
              value: {{ .value | quote }}
          {{- end }}
          {{- include "outline.secretEnv" . | nindent 12 }}
          {{- with .Values.extraEnvFrom }}
          envFrom:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /var/lib/outline/data
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: data
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "outline.fullname" . }}-data
        {{- else }}
          emptyDir: {}
        {{- end }}
{{- end }} 