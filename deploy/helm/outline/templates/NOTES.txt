1. Ethyrial Wiki has been deployed! 
{{- if .Values.ingress.enabled }}
Access your Outline instance at:
  {{- if .Values.ingress.tls.enabled }}
  {{ .Values.env.URL }}
  {{- else }}
  {{ .Values.env.URL | replace "https://" "http://" }}
  {{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "outline.fullname" . }}-web)
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "outline.fullname" . }}-web'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "outline.fullname" . }}-web --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "outline.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=web" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to access your wiki"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Authentication is configured to use Discord.
{{- if eq .Values.environment "staging" }}
   Environment: STAGING
{{- else if eq .Values.environment "production" }}
   Environment: PRODUCTION
{{- else }}
   Environment: {{ .Values.environment }}
{{- end }}

3. Debug mode: {{ if .Values.env.DEBUG }}ENABLED{{ else }}DISABLED{{ end }}
   Log level: {{ .Values.env.LOG_LEVEL | default "info" }}

4. Deployed services:
{{- range $key, $value := .Values.services }}
{{- if $value }}
   - {{ $key }}
{{- end }}
{{- end }}

5. Storage:
{{- if .Values.persistence.enabled }}
   - Persistence enabled with {{ .Values.persistence.size }} storage
{{- else }}
   - Using emptyDir (non-persistent storage)
{{- end }}
{{- if .Values.env.FILE_STORAGE }}
   - File storage: {{ .Values.env.FILE_STORAGE }}
{{- if eq .Values.env.FILE_STORAGE "s3" }}
   - S3 bucket: {{ .Values.env.AWS_S3_UPLOAD_BUCKET_NAME }}
{{- end }}
{{- end }}

6. Environment Settings:
   - ENVIRONMENT is set to: {{ .Values.env.ENVIRONMENT | default "production" }}
   - NODE_ENV is set to: {{ .Values.env.NODE_ENV | default "production" }}

7. Health Probes:
   - Readiness probe set to check after {{ .Values.probes.readiness.initialDelaySeconds | default "90" }}s
   - Liveness probe set to check after {{ .Values.probes.liveness.initialDelaySeconds | default "120" }}s

For troubleshooting, check pod status:
kubectl get pods -n {{ .Release.Namespace }}

For logs, use:
kubectl logs -n {{ .Release.Namespace }} <pod-name> 