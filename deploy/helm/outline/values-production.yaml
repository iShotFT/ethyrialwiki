# Production environment values for outline.
replicaCount:
  web: 1
  worker: 1
  collaboration: 1

# Services configuration - make sure all required services are enabled
services:
  web: true
  worker: true
  collaboration: true
  # Admin service is only for development
  admin: false

# Update strategy to ensure zero downtime during updates
deploymentStrategy:
  web:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  worker:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  collaboration:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

# Storage initialization job to set required labels and annotations
storageInit:
  enabled: true

# Storage class configuration
storageClasses:
  create: false # Don't create new storage classes
  adoptExisting: false # Don't try to adopt existing storage classes

# Authentication configuration
auth:
  discord:
    enabled: true
    # Credentials stored in Kubernetes secret

# Disable other authentication methods
auth.google.enabled: false
auth.slack.enabled: false
auth.oidc.enabled: false

# Disable autoscaling to keep consistent pod count
autoscaling:
  enabled: false

# Pod annotations for K3s integration
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "3000"

# Resources for production (increased to match staging configuration)
resources:
  web:
    limits:
      cpu: 2000m
      memory: 8Gi
    requests:
      cpu: 250m
      memory: 1Gi
  worker:
    limits:
      cpu: 2000m
      memory: 8Gi
    requests:
      cpu: 250m
      memory: 1Gi
  collaboration:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 100m
      memory: 256Mi

# Larger persistence sizes for production
persistence:
  enabled: true
  existingClaim: "" # Will be overridden by GitHub workflow for production
  storageClass: local-path # Use existing storage class
  accessMode: ReadWriteOnce
  size: 50Gi # Match the existing PVC size

postgresql:
  enabled: true
  primary:
    persistence:
      size: 20Gi
      storageClassName: "local-path" # K3s local-path provisioner
      storageClass: "local-path" # Also include this for compatibility
  auth:
    username: outline
    password: outline
    database: outline
    enablePostgresUser: true
    postgresPassword: outline
  volumePermissions:
    enabled: true

redis:
  enabled: true
  master:
    persistence:
      size: 10Gi
      storageClassName: "local-path" # K3s local-path provisioner
      storageClass: "local-path" # Also include this for compatibility
  auth:
    enabled: false
  volumePermissions:
    enabled: true

# Enable ingress for production
ingress:
  enabled: true
  className: "nginx" # This matches our K3s nginx ingress class
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    kubernetes.io/tls-acme: "true" # For cert-manager integration
  host: ethyrial.wiki
  path: /
  pathType: Prefix
  tls:
    enabled: true
    secretName: outline-production-tls

# Environment variables for production
env:
  # Identity/Environment
  ENVIRONMENT: "production" # Must be one of: development, production, staging, test
  NODE_ENV: "production"

  # URLs and Networking
  URL: "https://ethyrial.wiki"
  COLLABORATION_URL: "wss://ethyrial.wiki/collaboration"
  PORT: 3000
  FORCE_HTTPS: false

  # Debugging (disabled for production use)
  DEBUG: "false"
  LOG_LEVEL: "info"

  # Feature flags
  ENABLE_UPDATES: false
  RATE_LIMITER_ENABLED: true

  # S3 Storage configuration
  FILE_STORAGE: "s3"
  AWS_S3_UPLOAD_BUCKET_NAME: "ethyrial-wiki"
  AWS_S3_UPLOAD_BUCKET_URL: "https://s3.eu-central-1.amazonaws.com"
  AWS_REGION: "eu-central-1"
  PGSSLMODE: "disable"

# Add host networking for compatibility
hostNetwork: false # Changed to false as we're using node ports

# Add DNS config for K3s
dnsConfig:
  nameservers:
    - 10.43.0.10 # K3s CoreDNS service IP
  searches:
    - ethyrial-prod.svc.cluster.local
    - svc.cluster.local
    - cluster.local

# Add explicit service configuration for better discoverability
service:
  type: NodePort
  port: 3000
  nodePort: 30081

# Reference existing secrets (created according to README instructions)
existingSecrets:
  auth: "outline-auth-prod"
  keys: "outline-keys-prod"
  s3: "outline-s3-prod"

# Custom probe settings for better startup
probes:
  readiness:
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  liveness:
    initialDelaySeconds: 120
    periodSeconds: 20
    timeoutSeconds: 5
    failureThreshold: 6

# Nginx Proxy Manager Integration (disabled by default)
nginxProxyManager:
  enabled: false
  domains: "ethyrial.wiki"
  certificateId: 1
